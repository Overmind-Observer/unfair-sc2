include "TriggerLibs/NativeLib"
include "LibD169EC7B_h"
include "LibDBC4E2D2_h"

include "Lib64FE5A74_h"

//--------------------------------------------------------------------------------------------------
// Library: WORKERS BUILD PROCESS
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void lib64FE5A74_InitLibraries () {
    libNtve_InitVariables();
    libD169EC7B_InitVariables();
    libDBC4E2D2_InitVariables();
}

// Variable Initialization
bool lib64FE5A74_InitVariables_completed = false;

void lib64FE5A74_InitVariables () {
    if (lib64FE5A74_InitVariables_completed) {
        return;
    }

    lib64FE5A74_InitVariables_completed = true;

}

// Functions
void lib64FE5A74_gf_SetPlayerBuildProcessType (int lp_player, string lp_race) {
    // Automatic Variable Declarations
    string auto0B5455CF_val;

    // Implementation
    auto0B5455CF_val = lp_race;
    if (auto0B5455CF_val == "Zerg") {
        lib64FE5A74_gf_BlockProtossBuildLikeTerran(lp_player);
        lib64FE5A74_gf_BlockTerranBuildLikeTerran(lp_player);
        lib64FE5A74_gf_BlockZergBuildLikeTerran(lp_player);
        lib64FE5A74_gf_BlockProtossBuildLikeProtoss(lp_player);
        lib64FE5A74_gf_BlockTerranBuildLikeProtoss(lp_player);
        lib64FE5A74_gf_BlockZergBuildLikeProtoss(lp_player);
    }
    else if (auto0B5455CF_val == "Prot") {
        lib64FE5A74_gf_BlockProtossBuildLikeTerran(lp_player);
        lib64FE5A74_gf_BlockProtossBuildLikeZerg(lp_player);
        lib64FE5A74_gf_BlockTerranBuildLikeTerran(lp_player);
        lib64FE5A74_gf_BlockTerranBuildLikeZerg(lp_player);
        lib64FE5A74_gf_BlockZergBuildLikeTerran(lp_player);
        lib64FE5A74_gf_BlockZergBuildLikeZerg(lp_player);
    }
    else if (auto0B5455CF_val == "Terr") {
        lib64FE5A74_gf_BlockProtossBuildLikeZerg(lp_player);
        lib64FE5A74_gf_BlockProtossBuildLikeProtoss(lp_player);
        lib64FE5A74_gf_BlockTerranBuildLikeZerg(lp_player);
        lib64FE5A74_gf_BlockTerranBuildLikeProtoss(lp_player);
        lib64FE5A74_gf_BlockZergBuildLikeZerg(lp_player);
        lib64FE5A74_gf_BlockZergBuildLikeProtoss(lp_player);
    }
    else {
    }
}

void lib64FE5A74_gf_SetPlayerDefaultBuildProcessType (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    lib64FE5A74_gf_BlockProtossBuildLikeTerran(lp_player);
    lib64FE5A74_gf_BlockProtossBuildLikeZerg(lp_player);
    lib64FE5A74_gf_BlockZergBuildLikeTerran(lp_player);
    lib64FE5A74_gf_BlockZergBuildLikeProtoss(lp_player);
    lib64FE5A74_gf_BlockTerranBuildLikeZerg(lp_player);
    lib64FE5A74_gf_BlockTerranBuildLikeProtoss(lp_player);
}

void lib64FE5A74_gf_BlockTerranBuildLikeProtoss (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeAbilityAllow(lp_player, AbilityCommand("UnfairSC2BuildLikeProbe", 9), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("UnfairSC2BuildLikeProbe", 13), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("UnfairSC2BuildLikeProbe", 6), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("UnfairSC2BuildLikeProbe", 10), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("UnfairSC2BuildLikeProbe", 4), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("UnfairSC2BuildLikeProbe", 3), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("UnfairSC2BuildLikeProbe", 0), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("UnfairSC2BuildLikeProbe", 11), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("UnfairSC2BuildLikeProbe", 7), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("UnfairSC2BuildLikeProbe", 2), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("UnfairSC2BuildLikeProbe", 8), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("UnfairSC2BuildLikeProbe", 5), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("UnfairSC2BuildLikeProbe", 1), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("UnfairSC2BuildLikeProbe", 15), false);
}

void lib64FE5A74_gf_BlockTerranBuildLikeZerg (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeAbilityAllow(lp_player, AbilityCommand("UnfairSC2BuildLikeDrone", 9), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("UnfairSC2BuildLikeDrone", 13), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("UnfairSC2BuildLikeDrone", 6), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("UnfairSC2BuildLikeDrone", 10), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("UnfairSC2BuildLikeDrone", 4), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("UnfairSC2BuildLikeDrone", 3), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("UnfairSC2BuildLikeDrone", 0), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("UnfairSC2BuildLikeDrone", 11), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("UnfairSC2BuildLikeDrone", 2), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("UnfairSC2BuildLikeDrone", 7), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("UnfairSC2BuildLikeDrone", 8), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("UnfairSC2BuildLikeDrone", 5), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("UnfairSC2BuildLikeDrone", 1), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("UnfairSC2BuildLikeDrone", 15), false);
}

void lib64FE5A74_gf_BlockTerranBuildLikeTerran (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeAbilityAllow(lp_player, AbilityCommand("TerranBuild", 9), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("TerranBuild", 13), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("TerranBuild", 6), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("TerranBuild", 10), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("TerranBuild", 4), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("TerranBuild", 3), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("TerranBuild", 0), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("TerranBuild", 11), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("TerranBuild", 7), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("TerranBuild", 2), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("TerranBuild", 8), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("TerranBuild", 5), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("TerranBuild", 1), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("TerranBuild", 15), false);
}

void lib64FE5A74_gf_BlockProtossBuildLikeZerg (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeAbilityAllow(lp_player, AbilityCommand("UnfairSC2ProbeBuildLikeDrone", 10), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("UnfairSC2ProbeBuildLikeDrone", 2), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("UnfairSC2ProbeBuildLikeDrone", 15), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("UnfairSC2ProbeBuildLikeDrone", 3), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("UnfairSC2ProbeBuildLikeDrone", 13), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("UnfairSC2ProbeBuildLikeDrone", 9), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("UnfairSC2ProbeBuildLikeDrone", 14), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("UnfairSC2ProbeBuildLikeDrone", 5), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("UnfairSC2ProbeBuildLikeDrone", 0), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("UnfairSC2ProbeBuildLikeDrone", 4), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("UnfairSC2ProbeBuildLikeDrone", 1), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("UnfairSC2ProbeBuildLikeDrone", 12), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("UnfairSC2ProbeBuildLikeDrone", 6), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("UnfairSC2ProbeBuildLikeDrone", 11), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("UnfairSC2ProbeBuildLikeDrone", 7), false);
}

void lib64FE5A74_gf_BlockProtossBuildLikeTerran (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeAbilityAllow(lp_player, AbilityCommand("UnfairSC2ProbeBuildLikeSCV", 10), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("UnfairSC2ProbeBuildLikeSCV", 2), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("UnfairSC2ProbeBuildLikeSCV", 15), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("UnfairSC2ProbeBuildLikeSCV", 3), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("UnfairSC2ProbeBuildLikeSCV", 13), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("UnfairSC2ProbeBuildLikeSCV", 9), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("UnfairSC2ProbeBuildLikeSCV", 14), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("UnfairSC2ProbeBuildLikeSCV", 5), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("UnfairSC2ProbeBuildLikeSCV", 0), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("UnfairSC2ProbeBuildLikeSCV", 4), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("UnfairSC2ProbeBuildLikeSCV", 1), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("UnfairSC2ProbeBuildLikeSCV", 12), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("UnfairSC2ProbeBuildLikeSCV", 6), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("UnfairSC2ProbeBuildLikeSCV", 11), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("UnfairSC2ProbeBuildLikeSCV", 7), false);
}

void lib64FE5A74_gf_BlockProtossBuildLikeProtoss (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeAbilityAllow(lp_player, AbilityCommand("ProtossBuild", 10), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ProtossBuild", 2), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ProtossBuild", 15), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ProtossBuild", 3), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ProtossBuild", 13), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ProtossBuild", 9), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ProtossBuild", 14), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ProtossBuild", 5), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ProtossBuild", 0), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ProtossBuild", 4), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ProtossBuild", 1), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ProtossBuild", 12), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ProtossBuild", 6), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ProtossBuild", 11), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ProtossBuild", 7), false);
}

void lib64FE5A74_gf_BlockZergBuildLikeTerran (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeAbilityAllow(lp_player, AbilityCommand("UnfairSC2DroneBuildLikeSCV", 10), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("UnfairSC2DroneBuildLikeSCV", 0), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("UnfairSC2DroneBuildLikeSCV", 3), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("UnfairSC2DroneBuildLikeSCV", 5), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("UnfairSC2DroneBuildLikeSCV", 11), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("UnfairSC2DroneBuildLikeSCV", 7), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("UnfairSC2DroneBuildLikeSCV", 14), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("UnfairSC2DroneBuildLikeSCV", 15), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("UnfairSC2DroneBuildLikeSCV", 13), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("UnfairSC2DroneBuildLikeSCV", 9), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("UnfairSC2DroneBuildLikeSCV", 6), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("UnfairSC2DroneBuildLikeSCV", 4), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("UnfairSC2DroneBuildLikeSCV", 2), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("UnfairSC2DroneBuildLikeSCV", 8), false);
}

void lib64FE5A74_gf_BlockZergBuildLikeProtoss (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeAbilityAllow(lp_player, AbilityCommand("UnfairSC2DroneBuildLikeProbe", 10), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("UnfairSC2DroneBuildLikeProbe", 0), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("UnfairSC2DroneBuildLikeProbe", 3), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("UnfairSC2DroneBuildLikeProbe", 5), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("UnfairSC2DroneBuildLikeProbe", 11), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("UnfairSC2DroneBuildLikeProbe", 7), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("UnfairSC2DroneBuildLikeProbe", 14), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("UnfairSC2DroneBuildLikeProbe", 15), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("UnfairSC2DroneBuildLikeProbe", 13), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("UnfairSC2DroneBuildLikeProbe", 9), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("UnfairSC2DroneBuildLikeProbe", 6), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("UnfairSC2DroneBuildLikeProbe", 4), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("UnfairSC2DroneBuildLikeProbe", 2), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("UnfairSC2DroneBuildLikeProbe", 8), false);
}

void lib64FE5A74_gf_BlockZergBuildLikeZerg (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    TechTreeAbilityAllow(lp_player, AbilityCommand("ZergBuild", 10), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ZergBuild", 0), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ZergBuild", 3), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ZergBuild", 5), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ZergBuild", 11), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ZergBuild", 7), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ZergBuild", 14), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ZergBuild", 15), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ZergBuild", 13), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ZergBuild", 9), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ZergBuild", 6), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ZergBuild", 4), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ZergBuild", 2), false);
    TechTreeAbilityAllow(lp_player, AbilityCommand("ZergBuild", 8), false);
}

void lib64FE5A74_gf_SetupOptions (int lp_handicapindex) {
    // Variable Declarations
    int lv_optionindex;
    int lv_optionvalueindex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libD169EC7B_gv_hANDICAPS[lp_handicapindex].lv_name = StringExternal("Param/Value/lib_64FE5A74_C5FB8FE8");
    libD169EC7B_gv_hANDICAPS[lp_handicapindex].lv_description = StringExternal("Param/Value/lib_64FE5A74_B45B4199");
    libD169EC7B_gv_hANDICAPS[lp_handicapindex].lv_iconPath = "Assets\\Textures\\btn-upgrade-terran-garrisonbuildings.dds";
    lv_optionindex = 0;
    libD169EC7B_gv_hANDICAPS[lp_handicapindex].lv_playerOptions[lv_optionindex].lv_name = StringExternal("Param/Value/lib_64FE5A74_6F69B723");
    lv_optionvalueindex = 0;
    libD169EC7B_gv_hANDICAPS[lp_handicapindex].lv_playerOptions[lv_optionindex].lv_values[lv_optionvalueindex].lv_val = libD169EC7B_gv_hANDICAPOPTIONDISABLEDVAL;
    lv_optionvalueindex += 1;
    libD169EC7B_gv_hANDICAPS[lp_handicapindex].lv_playerOptions[lv_optionindex].lv_values[lv_optionvalueindex].lv_val = lib64FE5A74_gv_pROTOSS;
    lv_optionvalueindex += 1;
    libD169EC7B_gv_hANDICAPS[lp_handicapindex].lv_playerOptions[lv_optionindex].lv_values[lv_optionvalueindex].lv_val = lib64FE5A74_gv_tERRAN;
    lv_optionvalueindex += 1;
    libD169EC7B_gv_hANDICAPS[lp_handicapindex].lv_playerOptions[lv_optionindex].lv_values[lv_optionvalueindex].lv_val = lib64FE5A74_gv_zERG;
    lv_optionvalueindex += 1;
    libD169EC7B_gv_hANDICAPS[lp_handicapindex].lv_playerOptions[lv_optionindex].lv_numberofValues = lv_optionvalueindex;
    lv_optionindex += 1;
    libD169EC7B_gv_hANDICAPS[lp_handicapindex].lv_numberofPlayerOptions = lv_optionindex;
    libD169EC7B_gv_hANDICAPS[lp_handicapindex].lv_setupTrigger = lib64FE5A74_gt_SetupHandicap;
}

void lib64FE5A74_gf_EnableHandicap (int lp_handicapIndex) {
    // Variable Declarations
    playergroup lv_players;

    // Automatic Variable Declarations
    playergroup autoFC3DAC96_g;
    int autoFC3DAC96_var;
    playergroup auto29D63A49_g;
    int auto29D63A49_var;
    string autoA54BFCF1_val;

    // Variable Initialization
    lv_players = PlayerGroupEmpty();

    // Implementation
    if ((libD169EC7B_gv_hANDICAPS[lp_handicapIndex].lv_enabled == true)) {
        auto29D63A49_g = PlayerGroupActive();
        auto29D63A49_var = -1;
        while (true) {
            auto29D63A49_var = PlayerGroupNextPlayer(auto29D63A49_g, auto29D63A49_var);
            if (auto29D63A49_var < 0) { break; }
            if ((libD169EC7B_gv_hANDICAPS[lp_handicapIndex].lv_playerOptions[0].lv_selectedVals[auto29D63A49_var] != libD169EC7B_gv_hANDICAPOPTIONDISABLEDVAL)) {
                PlayerGroupAdd(lv_players, auto29D63A49_var);
                libDBC4E2D2_gv_pLAYERS[auto29D63A49_var].lv_wORKERSBUILDPROCESS.lv_enabled = true;
                autoA54BFCF1_val = libD169EC7B_gv_hANDICAPS[lp_handicapIndex].lv_playerOptions[0].lv_selectedVals[auto29D63A49_var];
                if (autoA54BFCF1_val == lib64FE5A74_gv_pROTOSS) {
                    libDBC4E2D2_gv_pLAYERS[auto29D63A49_var].lv_wORKERSBUILDPROCESS.lv_race = "Prot";
                    lib64FE5A74_gf_SetPlayerBuildProcessType(auto29D63A49_var, libDBC4E2D2_gv_pLAYERS[auto29D63A49_var].lv_wORKERSBUILDPROCESS.lv_race);
                }
                else if (autoA54BFCF1_val == lib64FE5A74_gv_tERRAN) {
                    libDBC4E2D2_gv_pLAYERS[auto29D63A49_var].lv_wORKERSBUILDPROCESS.lv_race = "Terr";
                    lib64FE5A74_gf_SetPlayerBuildProcessType(auto29D63A49_var, libDBC4E2D2_gv_pLAYERS[auto29D63A49_var].lv_wORKERSBUILDPROCESS.lv_race);
                }
                else if (autoA54BFCF1_val == lib64FE5A74_gv_zERG) {
                    libDBC4E2D2_gv_pLAYERS[auto29D63A49_var].lv_wORKERSBUILDPROCESS.lv_race = "Zerg";
                    lib64FE5A74_gf_SetPlayerBuildProcessType(auto29D63A49_var, libDBC4E2D2_gv_pLAYERS[auto29D63A49_var].lv_wORKERSBUILDPROCESS.lv_race);
                }
                else {
                    libDBC4E2D2_gv_pLAYERS[auto29D63A49_var].lv_wORKERSBUILDPROCESS.lv_race = PlayerRace(auto29D63A49_var);
                    lib64FE5A74_gf_SetPlayerDefaultBuildProcessType(auto29D63A49_var);
                }
            }
            else {
                libDBC4E2D2_gv_pLAYERS[auto29D63A49_var].lv_wORKERSBUILDPROCESS.lv_race = PlayerRace(auto29D63A49_var);
                lib64FE5A74_gf_SetPlayerDefaultBuildProcessType(auto29D63A49_var);
            }
        }
        if ((PlayerGroupCount(lv_players) > 0)) {
            TextExpressionSetToken("Param/Expression/lib_64FE5A74_11CBF1DD", "Description", libD169EC7B_gv_hANDICAPS[lp_handicapIndex].lv_description);
            TextExpressionSetToken("Param/Expression/lib_64FE5A74_11CBF1DD", "Players", libDBC4E2D2_gf_GetPlayerNamesColored(lv_players));
            HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(libD169EC7B_gv_hANDICAPS[lp_handicapIndex].lv_name, libNtve_ge_TipType_NormalTip), TextExpressionAssemble("Param/Expression/lib_64FE5A74_11CBF1DD"), libD169EC7B_gv_hANDICAPS[lp_handicapIndex].lv_name, libD169EC7B_gv_hANDICAPS[lp_handicapIndex].lv_iconPath);
        }

    }
    else {
        autoFC3DAC96_g = PlayerGroupActive();
        autoFC3DAC96_var = -1;
        while (true) {
            autoFC3DAC96_var = PlayerGroupNextPlayer(autoFC3DAC96_g, autoFC3DAC96_var);
            if (autoFC3DAC96_var < 0) { break; }
            libDBC4E2D2_gv_pLAYERS[autoFC3DAC96_var].lv_wORKERSBUILDPROCESS.lv_race = PlayerRace(autoFC3DAC96_var);
            lib64FE5A74_gf_SetPlayerDefaultBuildProcessType(autoFC3DAC96_var);
        }
    }
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: Setup Handicap
//--------------------------------------------------------------------------------------------------
bool lib64FE5A74_gt_SetupHandicap_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    lib64FE5A74_gf_EnableHandicap(libD169EC7B_gv_activeHandicapIndex);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib64FE5A74_gt_SetupHandicap_Init () {
    lib64FE5A74_gt_SetupHandicap = TriggerCreate("lib64FE5A74_gt_SetupHandicap_Func");
}

void lib64FE5A74_InitTriggers () {
    lib64FE5A74_gt_SetupHandicap_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool lib64FE5A74_InitLib_completed = false;

void lib64FE5A74_InitLib () {
    if (lib64FE5A74_InitLib_completed) {
        return;
    }

    lib64FE5A74_InitLib_completed = true;

    lib64FE5A74_InitLibraries();
    lib64FE5A74_InitVariables();
    lib64FE5A74_InitTriggers();
}

include "LibD169EC7B"
include "LibDBC4E2D2"

