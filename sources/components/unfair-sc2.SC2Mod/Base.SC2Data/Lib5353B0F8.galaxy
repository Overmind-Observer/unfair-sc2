include "TriggerLibs/NativeLib"
include "LibD169EC7B_h"

include "Lib5353B0F8_h"

//--------------------------------------------------------------------------------------------------
// Library: WALL
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void lib5353B0F8_InitLibraries () {
    libNtve_InitVariables();
    libD169EC7B_InitVariables();
}

// Variable Initialization
bool lib5353B0F8_InitVariables_completed = false;

void lib5353B0F8_InitVariables () {
    if (lib5353B0F8_InitVariables_completed) {
        return;
    }

    lib5353B0F8_InitVariables_completed = true;

    lib5353B0F8_gv_wallTimer = TimerCreate();
    lib5353B0F8_gv_wallTimerWindow = c_timerWindowNone;
}

// Functions
void lib5353B0F8_gf_SetupOptions (int lp_handicapindex) {
    // Variable Declarations
    int lv_optionindex;
    int lv_optionvalueindex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libD169EC7B_gv_hANDICAPS[lp_handicapindex].lv_name = StringExternal("Param/Value/lib_5353B0F8_14DB006C");
    libD169EC7B_gv_hANDICAPS[lp_handicapindex].lv_description = StringExternal("Param/Value/lib_5353B0F8_598EFD83");
    libD169EC7B_gv_hANDICAPS[lp_handicapindex].lv_iconPath = "Assets\\Textures\\btn-building-terran-planetaryfortress.dds";
    lv_optionindex = 0;
    libD169EC7B_gv_hANDICAPS[lp_handicapindex].lv_gameOptions[lv_optionindex].lv_name = StringExternal("Param/Value/lib_5353B0F8_A90CFB06");
    lv_optionvalueindex = 0;
    libD169EC7B_gv_hANDICAPS[lp_handicapindex].lv_gameOptions[lv_optionindex].lv_values[lv_optionvalueindex].lv_val = "1";
    libD169EC7B_gv_hANDICAPS[lp_handicapindex].lv_gameOptions[lv_optionindex].lv_selectedVal = "1";
    lv_optionvalueindex += 1;
    libD169EC7B_gv_hANDICAPS[lp_handicapindex].lv_gameOptions[lv_optionindex].lv_values[lv_optionvalueindex].lv_val = "2";
    lv_optionvalueindex += 1;
    libD169EC7B_gv_hANDICAPS[lp_handicapindex].lv_gameOptions[lv_optionindex].lv_values[lv_optionvalueindex].lv_val = "3";
    lv_optionvalueindex += 1;
    libD169EC7B_gv_hANDICAPS[lp_handicapindex].lv_gameOptions[lv_optionindex].lv_values[lv_optionvalueindex].lv_val = "4";
    lv_optionvalueindex += 1;
    libD169EC7B_gv_hANDICAPS[lp_handicapindex].lv_gameOptions[lv_optionindex].lv_values[lv_optionvalueindex].lv_val = "5";
    lv_optionvalueindex += 1;
    libD169EC7B_gv_hANDICAPS[lp_handicapindex].lv_gameOptions[lv_optionindex].lv_values[lv_optionvalueindex].lv_val = "7";
    lv_optionvalueindex += 1;
    libD169EC7B_gv_hANDICAPS[lp_handicapindex].lv_gameOptions[lv_optionindex].lv_values[lv_optionvalueindex].lv_val = "10";
    lv_optionvalueindex += 1;
    libD169EC7B_gv_hANDICAPS[lp_handicapindex].lv_gameOptions[lv_optionindex].lv_numberofValues = lv_optionvalueindex;
    lv_optionindex += 1;
    libD169EC7B_gv_hANDICAPS[lp_handicapindex].lv_gameOptions[lv_optionindex].lv_name = StringExternal("Param/Value/lib_5353B0F8_139C583B");
    lv_optionvalueindex = 0;
    libD169EC7B_gv_hANDICAPS[lp_handicapindex].lv_gameOptions[lv_optionindex].lv_values[lv_optionvalueindex].lv_val = lib5353B0F8_gv_horizontal;
    libD169EC7B_gv_hANDICAPS[lp_handicapindex].lv_gameOptions[lv_optionindex].lv_selectedVal = lib5353B0F8_gv_horizontal;
    lv_optionvalueindex += 1;
    libD169EC7B_gv_hANDICAPS[lp_handicapindex].lv_gameOptions[lv_optionindex].lv_values[lv_optionvalueindex].lv_val = lib5353B0F8_gv_vertical;
    lv_optionvalueindex += 1;
    libD169EC7B_gv_hANDICAPS[lp_handicapindex].lv_gameOptions[lv_optionindex].lv_values[lv_optionvalueindex].lv_val = lib5353B0F8_gv_diagonal;
    lv_optionvalueindex += 1;
    libD169EC7B_gv_hANDICAPS[lp_handicapindex].lv_gameOptions[lv_optionindex].lv_values[lv_optionvalueindex].lv_val = lib5353B0F8_gv_diagonal2;
    lv_optionvalueindex += 1;
    libD169EC7B_gv_hANDICAPS[lp_handicapindex].lv_gameOptions[lv_optionindex].lv_values[lv_optionvalueindex].lv_val = lib5353B0F8_gv_crossX;
    lv_optionvalueindex += 1;
    libD169EC7B_gv_hANDICAPS[lp_handicapindex].lv_gameOptions[lv_optionindex].lv_values[lv_optionvalueindex].lv_val = lib5353B0F8_gv_cross;
    lv_optionvalueindex += 1;
    libD169EC7B_gv_hANDICAPS[lp_handicapindex].lv_gameOptions[lv_optionindex].lv_numberofValues = lv_optionvalueindex;
    lv_optionindex += 1;
    libD169EC7B_gv_hANDICAPS[lp_handicapindex].lv_numberofGameOptions = lv_optionindex;
    libD169EC7B_gv_hANDICAPS[lp_handicapindex].lv_setupTrigger = lib5353B0F8_gt_SetupHandicap;
}

void lib5353B0F8_gf_EnableHandicap (int lp_handicapIndex) {
    // Automatic Variable Declarations
    string auto5D09E13E_val;
    string autoD72E55EE_val;

    // Implementation
    if ((libD169EC7B_gv_hANDICAPS[lp_handicapIndex].lv_enabled == true)) {
        auto5D09E13E_val = libD169EC7B_gv_hANDICAPS[lp_handicapIndex].lv_gameOptions[0].lv_selectedVal;
        if (auto5D09E13E_val == "1") {
            lib5353B0F8_gv_wallTimeout = 60.0;
        }
        else if (auto5D09E13E_val == "2") {
            lib5353B0F8_gv_wallTimeout = 120.0;
        }
        else if (auto5D09E13E_val == "3") {
            lib5353B0F8_gv_wallTimeout = 180.0;
        }
        else if (auto5D09E13E_val == "4") {
            lib5353B0F8_gv_wallTimeout = 240.0;
        }
        else if (auto5D09E13E_val == "5") {
            lib5353B0F8_gv_wallTimeout = 300.0;
        }
        else if (auto5D09E13E_val == "7") {
            lib5353B0F8_gv_wallTimeout = 420.0;
        }
        else if (auto5D09E13E_val == "10") {
            lib5353B0F8_gv_wallTimeout = 600.0;
        }
        else {
            lib5353B0F8_gv_wallTimeout = 60.0;
        }
        autoD72E55EE_val = libD169EC7B_gv_hANDICAPS[lp_handicapIndex].lv_gameOptions[1].lv_selectedVal;
        if (autoD72E55EE_val == lib5353B0F8_gv_vertical) {
            lib5353B0F8_gf_CreateVerticalWall();
        }
        else if (autoD72E55EE_val == lib5353B0F8_gv_horizontal) {
            lib5353B0F8_gf_CreateHorizontalWall();
        }
        else if (autoD72E55EE_val == lib5353B0F8_gv_diagonal) {
            lib5353B0F8_gf_CreateMainDiagonalWall();
        }
        else if (autoD72E55EE_val == lib5353B0F8_gv_diagonal2) {
            lib5353B0F8_gf_CreateAddDiagonalWall();
        }
        else if (autoD72E55EE_val == lib5353B0F8_gv_crossX) {
            lib5353B0F8_gf_CreateMainDiagonalWall();
            lib5353B0F8_gf_CreateAddDiagonalWall();
        }
        else if (autoD72E55EE_val == lib5353B0F8_gv_cross) {
            lib5353B0F8_gf_CreateVerticalWall();
            lib5353B0F8_gf_CreateHorizontalWall();
        }
        else {
        }
        TextExpressionSetToken("Param/Expression/lib_5353B0F8_C2000C23", "WallLifeTime", FixedToText(lib5353B0F8_gv_wallTimeout, c_fixedPrecisionAny));
        HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(libD169EC7B_gv_hANDICAPS[lp_handicapIndex].lv_name, libNtve_ge_TipType_NormalTip), TextExpressionAssemble("Param/Expression/lib_5353B0F8_C2000C23"), libD169EC7B_gv_hANDICAPS[lp_handicapIndex].lv_name, libD169EC7B_gv_hANDICAPS[lp_handicapIndex].lv_iconPath);
        TimerStart(lib5353B0F8_gv_wallTimer, lib5353B0F8_gv_wallTimeout, false, c_timeReal);
        TimerWindowCreate(lib5353B0F8_gv_wallTimer, StringExternal("Param/Value/lib_5353B0F8_AE67E78C"), true, false);
        lib5353B0F8_gv_wallTimerWindow = TimerWindowLastCreated();
        TimerWindowShowBorder(lib5353B0F8_gv_wallTimerWindow, false);
        TimerWindowShow(lib5353B0F8_gv_wallTimerWindow, PlayerGroupActive(), true);
    }

}

void lib5353B0F8_gf_CreateMainDiagonalWall () {
    // Variable Declarations
    point lv_point;
    fixed lv_x;
    fixed lv_y;
    fixed lv_xOffset;
    fixed lv_yOffset;
    fixed lv_width;
    fixed lv_heigth;
    fixed lv_xStep;
    fixed lv_yStep;

    // Automatic Variable Declarations
    fixed autoCCE197D5_ae;
    fixed autoCCE197D5_ai;

    // Variable Initialization
    lv_point = RegionGetBoundsMin(RegionPlayableMap());
    lv_xOffset = PointGetX(lv_point);
    lv_yOffset = PointGetY(lv_point);
    lv_width = libNtve_gf_WidthOfRegion(RegionPlayableMap());
    lv_heigth = libNtve_gf_HeightOfRegion(RegionPlayableMap());
    lv_xStep = 3.0;
    lv_yStep = 3.0;

    // Implementation
    if ((lv_width < lv_heigth)) {
        lv_yStep = (lv_yStep * (lv_heigth / lv_width));
    }
    else {
        lv_xStep = (lv_xStep * (lv_width / lv_heigth));
    }
    lv_y = lv_yOffset;
    autoCCE197D5_ae = (lv_width + lv_xOffset);
    autoCCE197D5_ai = lv_xStep;
    lv_x = lv_xOffset;
    for ( ; ( (autoCCE197D5_ai >= 0 && lv_x <= autoCCE197D5_ae) || (autoCCE197D5_ai < 0 && lv_x >= autoCCE197D5_ae) ) ; lv_x += autoCCE197D5_ai ) {
        lib5353B0F8_gf_CreateWallItem(lv_x, lv_y);
        lv_y = (lv_y + lv_yStep);
    }
}

void lib5353B0F8_gf_CreateAddDiagonalWall () {
    // Variable Declarations
    point lv_point;
    fixed lv_x;
    fixed lv_y;
    fixed lv_xOffset;
    fixed lv_yOffset;
    fixed lv_width;
    fixed lv_heigth;
    fixed lv_xStep;
    fixed lv_yStep;

    // Automatic Variable Declarations
    fixed auto519FEE65_ae;
    fixed auto519FEE65_ai;

    // Variable Initialization
    lv_point = RegionGetBoundsMin(RegionPlayableMap());
    lv_xOffset = PointGetX(lv_point);
    lv_yOffset = PointGetY(lv_point);
    lv_width = libNtve_gf_WidthOfRegion(RegionPlayableMap());
    lv_heigth = libNtve_gf_HeightOfRegion(RegionPlayableMap());
    lv_xStep = 3.0;
    lv_yStep = 3.0;

    // Implementation
    if ((lv_width < lv_heigth)) {
        lv_yStep = (lv_yStep * (lv_heigth / lv_width));
    }
    else {
        lv_xStep = (lv_xStep * (lv_width / lv_heigth));
    }
    lv_y = lv_heigth;
    auto519FEE65_ae = (lv_width + lv_xOffset);
    auto519FEE65_ai = lv_xStep;
    lv_x = lv_xOffset;
    for ( ; ( (auto519FEE65_ai >= 0 && lv_x <= auto519FEE65_ae) || (auto519FEE65_ai < 0 && lv_x >= auto519FEE65_ae) ) ; lv_x += auto519FEE65_ai ) {
        lib5353B0F8_gf_CreateWallItem(lv_x, lv_y);
        lv_y = (lv_y - lv_yStep);
    }
}

void lib5353B0F8_gf_CreateVerticalWall () {
    // Variable Declarations
    point lv_point;
    fixed lv_x;
    fixed lv_y;
    fixed lv_xOffset;
    fixed lv_yOffset;
    fixed lv_width;
    fixed lv_heigth;
    fixed lv_xStep;
    fixed lv_yStep;

    // Automatic Variable Declarations
    fixed auto1A032C7E_ae;
    fixed auto1A032C7E_ai;

    // Variable Initialization
    lv_point = RegionGetBoundsMin(RegionPlayableMap());
    lv_xOffset = PointGetX(lv_point);
    lv_yOffset = PointGetY(lv_point);
    lv_width = libNtve_gf_WidthOfRegion(RegionPlayableMap());
    lv_heigth = libNtve_gf_HeightOfRegion(RegionPlayableMap());
    lv_xStep = 3.0;
    lv_yStep = 3.0;

    // Implementation
    auto1A032C7E_ae = (lv_heigth + lv_yOffset);
    auto1A032C7E_ai = lv_yStep;
    lv_y = lv_yOffset;
    for ( ; ( (auto1A032C7E_ai >= 0 && lv_y <= auto1A032C7E_ae) || (auto1A032C7E_ai < 0 && lv_y >= auto1A032C7E_ae) ) ; lv_y += auto1A032C7E_ai ) {
        lib5353B0F8_gf_CreateWallItem(((lv_width / 2.0) + lv_xOffset), lv_y);
    }
}

void lib5353B0F8_gf_CreateHorizontalWall () {
    // Variable Declarations
    point lv_point;
    fixed lv_x;
    fixed lv_y;
    fixed lv_xOffset;
    fixed lv_yOffset;
    fixed lv_width;
    fixed lv_heigth;
    fixed lv_xStep;
    fixed lv_yStep;

    // Automatic Variable Declarations
    fixed auto509E8A75_ae;
    fixed auto509E8A75_ai;

    // Variable Initialization
    lv_point = RegionGetBoundsMin(RegionPlayableMap());
    lv_xOffset = PointGetX(lv_point);
    lv_yOffset = PointGetY(lv_point);
    lv_width = libNtve_gf_WidthOfRegion(RegionPlayableMap());
    lv_heigth = libNtve_gf_HeightOfRegion(RegionPlayableMap());
    lv_xStep = 3.0;
    lv_yStep = 3.0;

    // Implementation
    auto509E8A75_ae = (lv_width + lv_xOffset);
    auto509E8A75_ai = lv_xStep;
    lv_x = lv_xOffset;
    for ( ; ( (auto509E8A75_ai >= 0 && lv_x <= auto509E8A75_ae) || (auto509E8A75_ai < 0 && lv_x >= auto509E8A75_ae) ) ; lv_x += auto509E8A75_ai ) {
        lib5353B0F8_gf_CreateWallItem(lv_x, ((lv_heigth / 2.0) + lv_yOffset));
    }
}

void lib5353B0F8_gf_CreateWallItem (fixed lp_x, fixed lp_y) {
    // Automatic Variable Declarations
    playergroup auto36192505_g;
    int auto36192505_var;

    // Implementation
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PlanetaryFortress", c_unitCreateIgnorePlacement, 15, Point(lp_x, lp_y));
    UnitBehaviorAdd(UnitLastCreated(), "Detector9", UnitLastCreated(), 1);
    UnitWeaponAdd(UnitLastCreated(), "UnfairSc2Wall", "PlanetaryFortress");
    libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
    auto36192505_g = PlayerGroupAll();
    auto36192505_var = -1;
    while (true) {
        auto36192505_var = PlayerGroupNextPlayer(auto36192505_g, auto36192505_var);
        if (auto36192505_var < 0) { break; }
        VisRevealArea(auto36192505_var, RegionCircle(Point(lp_x, lp_y), 3.0), ((lib5353B0F8_gv_wallTimeout + 5.0) / 0.72), false);
    }
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: Setup Handicap
//--------------------------------------------------------------------------------------------------
bool lib5353B0F8_gt_SetupHandicap_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    lib5353B0F8_gf_EnableHandicap(libD169EC7B_gv_activeHandicapIndex);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib5353B0F8_gt_SetupHandicap_Init () {
    lib5353B0F8_gt_SetupHandicap = TriggerCreate("lib5353B0F8_gt_SetupHandicap_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Wall Timer Elapsed
//--------------------------------------------------------------------------------------------------
bool lib5353B0F8_gt_WallTimerElapsed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto57CACC9B_g;
    int auto57CACC9B_u;
    unit auto57CACC9B_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto57CACC9B_g = UnitGroup("PlanetaryFortress", 15, RegionEntireMap(), UnitFilter(0, (1 << (c_targetFilterInvulnerable - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto57CACC9B_u = UnitGroupCount(auto57CACC9B_g, c_unitCountAll);
    for (;; auto57CACC9B_u -= 1) {
        auto57CACC9B_var = UnitGroupUnitFromEnd(auto57CACC9B_g, auto57CACC9B_u);
        if (auto57CACC9B_var == null) { break; }
        UnitKill(auto57CACC9B_var);
    }
    TimerWindowShow(lib5353B0F8_gv_wallTimerWindow, PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib5353B0F8_gt_WallTimerElapsed_Init () {
    lib5353B0F8_gt_WallTimerElapsed = TriggerCreate("lib5353B0F8_gt_WallTimerElapsed_Func");
    TriggerAddEventTimer(lib5353B0F8_gt_WallTimerElapsed, lib5353B0F8_gv_wallTimer);
}

void lib5353B0F8_InitTriggers () {
    lib5353B0F8_gt_SetupHandicap_Init();
    lib5353B0F8_gt_WallTimerElapsed_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool lib5353B0F8_InitLib_completed = false;

void lib5353B0F8_InitLib () {
    if (lib5353B0F8_InitLib_completed) {
        return;
    }

    lib5353B0F8_InitLib_completed = true;

    lib5353B0F8_InitLibraries();
    lib5353B0F8_InitVariables();
    lib5353B0F8_InitTriggers();
}

include "LibD169EC7B"

