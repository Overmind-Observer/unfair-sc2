include "TriggerLibs/NativeLib"
include "LibD169EC7B_h"
include "LibDBC4E2D2_h"

include "LibD84472BA_h"

//--------------------------------------------------------------------------------------------------
// Library: ALL UPGRADES
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void libD84472BA_InitLibraries () {
    libNtve_InitVariables();
    libD169EC7B_InitVariables();
    libDBC4E2D2_InitVariables();
}

// Variable Initialization
bool libD84472BA_InitVariables_completed = false;

void libD84472BA_InitVariables () {
    if (libD84472BA_InitVariables_completed) {
        return;
    }

    libD84472BA_InitVariables_completed = true;

}

// Functions
void libD84472BA_gf_SetupOptions (int lp_handicapindex) {
    // Variable Declarations
    int lv_optionindex;
    int lv_optionvalueindex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    libD169EC7B_gv_hANDICAPS[lp_handicapindex].lv_name = StringExternal("Param/Value/lib_D84472BA_65907742");
    libD169EC7B_gv_hANDICAPS[lp_handicapindex].lv_description = StringExternal("Param/Value/lib_D84472BA_F9DBDB32");
    libD169EC7B_gv_hANDICAPS[lp_handicapindex].lv_iconPath = "Assets\\Textures\\talent-tychus-level13-additionalupgrades.dds";
    lv_optionindex = 0;
    libD169EC7B_gv_hANDICAPS[lp_handicapindex].lv_playerOptions[lv_optionindex].lv_name = StringExternal("Param/Value/lib_D84472BA_1CBAF680");
    lv_optionvalueindex = 0;
    libD169EC7B_gv_hANDICAPS[lp_handicapindex].lv_playerOptions[lv_optionindex].lv_values[lv_optionvalueindex].lv_val = libD169EC7B_gv_hANDICAPOPTIONDISABLEDVAL;
    lv_optionvalueindex += 1;
    libD169EC7B_gv_hANDICAPS[lp_handicapindex].lv_playerOptions[lv_optionindex].lv_values[lv_optionvalueindex].lv_val = libD84472BA_gv_allUpgrades;
    lv_optionvalueindex += 1;
    libD169EC7B_gv_hANDICAPS[lp_handicapindex].lv_playerOptions[lv_optionindex].lv_numberofValues = lv_optionvalueindex;
    lv_optionindex += 1;
    libD169EC7B_gv_hANDICAPS[lp_handicapindex].lv_numberofPlayerOptions = lv_optionindex;
    libD169EC7B_gv_hANDICAPS[lp_handicapindex].lv_setupTrigger = libD84472BA_gt_SetupHandicap;
}

void libD84472BA_gf_EnableHandicap (int lp_handicapIndex) {
    // Variable Declarations
    playergroup lv_players;

    // Automatic Variable Declarations
    playergroup autoF04BA90D_g;
    int autoF04BA90D_var;

    // Variable Initialization
    lv_players = PlayerGroupEmpty();

    // Implementation
    if ((libD169EC7B_gv_hANDICAPS[lp_handicapIndex].lv_enabled == true)) {
        autoF04BA90D_g = PlayerGroupActive();
        autoF04BA90D_var = -1;
        while (true) {
            autoF04BA90D_var = PlayerGroupNextPlayer(autoF04BA90D_g, autoF04BA90D_var);
            if (autoF04BA90D_var < 0) { break; }
            if ((libD169EC7B_gv_hANDICAPS[lp_handicapIndex].lv_playerOptions[0].lv_selectedVals[autoF04BA90D_var] != libD169EC7B_gv_hANDICAPOPTIONDISABLEDVAL)) {
                PlayerGroupAdd(lv_players, autoF04BA90D_var);
                libD84472BA_gf_EnableHandicapForPlayer(autoF04BA90D_var);
            }

        }
        if ((PlayerGroupCount(lv_players) > 0)) {
            TextExpressionSetToken("Param/Expression/lib_D84472BA_BD1B19BD", "Description", libD169EC7B_gv_hANDICAPS[lp_handicapIndex].lv_description);
            TextExpressionSetToken("Param/Expression/lib_D84472BA_BD1B19BD", "Players", libDBC4E2D2_gf_GetPlayerNamesColored(lv_players));
            HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(libD169EC7B_gv_hANDICAPS[lp_handicapIndex].lv_name, libNtve_ge_TipType_NormalTip), TextExpressionAssemble("Param/Expression/lib_D84472BA_BD1B19BD"), libD169EC7B_gv_hANDICAPS[lp_handicapIndex].lv_name, libD169EC7B_gv_hANDICAPS[libD169EC7B_gv_activeHandicapIndex].lv_iconPath);
        }

    }

}

void libD84472BA_gf_EnableHandicapForPlayer (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "ProtossGroundWeaponsLevel1", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "ProtossGroundWeaponsLevel2", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "ProtossGroundWeaponsLevel3", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "ProtossGroundArmorsLevel1", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "ProtossGroundArmorsLevel2", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "ProtossGroundArmorsLevel3", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "ProtossAirWeaponsLevel1", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "ProtossAirWeaponsLevel2", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "ProtossAirWeaponsLevel3", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "ProtossAirArmorsLevel1", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "ProtossAirArmorsLevel2", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "ProtossAirArmorsLevel3", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "ProtossShieldsLevel1", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "ProtossShieldsLevel2", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "ProtossShieldsLevel3", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "PhoenixRangeUpgrade", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AdeptPiercingAttack", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "WarpGateResearch", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "PsiStormTech", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BlinkTech", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "CarrierLaunchSpeedUpgrade", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "Charge", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "ExtendedThermalLance", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "ObserverGraviticBooster", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "GraviticDrive", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "DarkTemplarBlinkUpgrade", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "VoidRaySpeedUpgrade", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "ZergMeleeWeaponsLevel1", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "ZergMeleeWeaponsLevel2", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "ZergMeleeWeaponsLevel3", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "ZergFlyerWeaponsLevel1", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "ZergFlyerWeaponsLevel2", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "ZergFlyerWeaponsLevel3", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "ZergMissileWeaponsLevel1", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "ZergMissileWeaponsLevel2", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "ZergMissileWeaponsLevel3", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "ZergFlyerArmorsLevel1", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "ZergFlyerArmorsLevel2", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "ZergFlyerArmorsLevel3", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "ZergGroundArmorsLevel1", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "ZergGroundArmorsLevel2", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "ZergGroundArmorsLevel3", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "CentrificalHooks", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "Burrow", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "InfestorEnergyUpgrade", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "NeuralParasite", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "zerglingattackspeed", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "zerglingmovementspeed", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "overlordspeed", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "HydraliskSpeedUpgrade", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "GlialReconstitution", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "TunnelingClaws", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "ChitinousPlating", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "EvolveMuscularAugments", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "EvolveGroovedSpines", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "DiggingClaws", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "AnabolicSynthesis", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "LurkerRange", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "TerranShipWeaponsLevel1", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "TerranShipWeaponsLevel2", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "TerranShipWeaponsLevel3", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "TerranVehicleWeaponsLevel1", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "TerranVehicleWeaponsLevel2", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "TerranVehicleWeaponsLevel3", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "TerranVehicleAndShipArmorsLevel1", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "TerranVehicleAndShipArmorsLevel2", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "TerranVehicleAndShipArmorsLevel3", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "TerranInfantryWeaponsLevel1", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "TerranInfantryWeaponsLevel2", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "TerranInfantryWeaponsLevel3", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "TerranInfantryArmorsLevel1", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "TerranInfantryArmorsLevel2", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "TerranInfantryArmorsLevel3", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "HiSecAutoTracking", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "TerranBuildingArmor", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "PersonalCloaking", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BattlecruiserEnableSpecializations", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "ShieldWall", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "Stimpack", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "PunisherGrenades", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "HighCapacityBarrels", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "DrillClaws", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BansheeCloak", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "RavenCorvidReactor", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "CycloneRapidFireLaunchers", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "SmartServos", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "MedivacIncreaseSpeedBoost", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "BansheeSpeed", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "LiberatorAGRangeUpgrade", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "CycloneLockOnDamageUpgrade", 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "EnhancedShockwaves", 1);
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: Setup Handicap
//--------------------------------------------------------------------------------------------------
bool libD84472BA_gt_SetupHandicap_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libD84472BA_gf_EnableHandicap(libD169EC7B_gv_activeHandicapIndex);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libD84472BA_gt_SetupHandicap_Init () {
    libD84472BA_gt_SetupHandicap = TriggerCreate("libD84472BA_gt_SetupHandicap_Func");
}

void libD84472BA_InitTriggers () {
    libD84472BA_gt_SetupHandicap_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool libD84472BA_InitLib_completed = false;

void libD84472BA_InitLib () {
    if (libD84472BA_InitLib_completed) {
        return;
    }

    libD84472BA_InitLib_completed = true;

    libD84472BA_InitLibraries();
    libD84472BA_InitVariables();
    libD84472BA_InitTriggers();
}

include "LibD169EC7B"
include "LibDBC4E2D2"

